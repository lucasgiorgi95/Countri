{"ast":null,"code":"import { CLEAN_COUNTRY_DETAILS, DELETE_ACTIVITY, FILTER_BY_ACTIVITIY, FILTER_BY_CONTINENT, GET_ALL_ACTIVITIES, GET_ALL_COUNTRIES, GET_COUNTRY_DETAILS, GET_COUNTRY_NAME, ORDER_BY_AZ, ORDER_BY_POPULATION, POST_ACTIVITY, ORD_CONTINENT } from \"../action/Actions\";\nconst initialState = {\n  countries: [],\n  allCountries: [],\n  activities: [],\n  details: []\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_COUNTRIES:\n      {\n        return { ...state,\n          countries: action.payload,\n          allCountries: action.payload\n        };\n      }\n\n    case GET_ALL_ACTIVITIES:\n      {\n        return { ...state,\n          activities: action.payload,\n          allActivities: action.payload\n        };\n      }\n\n    case GET_COUNTRY_NAME:\n      {\n        return { ...state,\n          countries: action.payload\n        };\n      }\n\n    case POST_ACTIVITY:\n      {\n        return { ...state\n        };\n      }\n    // case FILTER_BY_CONTINENT: {\n    //   const allCountries = state.allCountries;\n    //   const continentFilter =\n    //     action.payload === \"All\"\n    //       ? allCountries\n    //       : allCountries.filter((e) => e.continents === action.payload);\n    //   return {\n    //     ...state,\n    //     countries: continentFilter,\n    //   };\n    // }\n\n    case ORD_CONTINENT:\n      {\n        return { ...state,\n          countries: state.countries.filter(c => c.region === action.payload)\n        };\n      }\n\n    case FILTER_BY_ACTIVITIY:\n      {\n        const countriesWithActivities = state.allCountries.filter(country => country.activities.length > 0);\n        console.log(\"paises con actividades\", countriesWithActivities);\n        let countriesSelected = [];\n        countriesWithActivities.forEach(country => {\n          country.activities.forEach(activity => {\n            if (activity.name === action.payload) countriesSelected.push(country);\n          });\n        });\n        const countriesFiltered = action.payload === \"All\" ? state.allCountries : countriesSelected;\n        console.log(countriesFiltered);\n        return { ...state,\n          countries: countriesFiltered\n        };\n      }\n\n    case ORDER_BY_POPULATION:\n      {\n        let sortedCountries;\n\n        if (action.payload === \"desc\") {\n          sortedCountries = state.countries.sort((a, b) => {\n            if (a.population > b.population) {\n              //si a es mayor, lo pone dsps de b\n              return 1;\n            }\n\n            if (b.population > a.population) {\n              //si a es menor, lo pone antes de b\n              return -1;\n            }\n\n            return 0; //si son iguales los deja como esta.\n          });\n        } else {\n          sortedCountries = state.countries.sort((a, b) => {\n            if (a.population > b.population) {\n              return -1;\n            }\n\n            if (b.population > a.population) {\n              return 1;\n            }\n\n            return 0;\n          });\n        }\n\n        return { ...state,\n          countries: sortedCountries\n        };\n      }\n\n    case ORDER_BY_AZ:\n      {\n        // let sortedCountries;\n        // if (action.payload === \"asc\") {\n        //   sortedCountries = state.countries.sort((a, b) => {\n        //     if (a.name > b.name) {\n        //       //si a es mayor, lo pone dsps de b\n        //       return 1;\n        //     }\n        //     if (b.name > a.name) {\n        //       //si a es menor, lo pone antes de b\n        //       return -1;\n        //     }\n        //     return 0; //si son iguales los deja como esta.\n        //   });\n        // } else {\n        //   sortedCountries = state.countries.sort((a, b) => {\n        //     if (a.name > b.name) {\n        //       return -1;\n        //     }\n        //     if (b.name > a.name) {\n        //       return 1;\n        //     }\n        //     return 0; \n        //   });\n        // }\n        return { ...state,\n          countries: sortedCountries\n        };\n      }\n\n    case GET_COUNTRY_DETAILS:\n      {\n        return { ...state,\n          details: action.payload\n        };\n      }\n\n    case CLEAN_COUNTRY_DETAILS:\n      {\n        return { ...state,\n          details: []\n        };\n      }\n\n    case DELETE_ACTIVITY:\n      {\n        let deleted = state.allCountries.filter(e => e.id !== action.payload);\n        return { ...state,\n          allCountries: deleted\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["CLEAN_COUNTRY_DETAILS","DELETE_ACTIVITY","FILTER_BY_ACTIVITIY","FILTER_BY_CONTINENT","GET_ALL_ACTIVITIES","GET_ALL_COUNTRIES","GET_COUNTRY_DETAILS","GET_COUNTRY_NAME","ORDER_BY_AZ","ORDER_BY_POPULATION","POST_ACTIVITY","ORD_CONTINENT","initialState","countries","allCountries","activities","details","rootReducer","state","action","type","payload","allActivities","filter","c","region","countriesWithActivities","country","length","console","log","countriesSelected","forEach","activity","name","push","countriesFiltered","sortedCountries","sort","a","b","population","deleted","e","id"],"sources":["/home/lucasgiorgi/Escritorio/Henry/PI/PI-Countries-main/client/src/Redux/reducer/Reducer.js"],"sourcesContent":["import {\n  CLEAN_COUNTRY_DETAILS,\n  DELETE_ACTIVITY,\n  FILTER_BY_ACTIVITIY,\n  FILTER_BY_CONTINENT,\n  GET_ALL_ACTIVITIES,\n  GET_ALL_COUNTRIES,\n  GET_COUNTRY_DETAILS,\n  GET_COUNTRY_NAME,\n  ORDER_BY_AZ,\n  ORDER_BY_POPULATION,\n  POST_ACTIVITY,\n  ORD_CONTINENT\n} from \"../action/Actions\";\n\nconst initialState = {\n  countries: [],\n  allCountries: [],\n  activities: [],\n  details: [],\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_COUNTRIES: {\n      return {\n        ...state,\n        countries: action.payload,\n        allCountries: action.payload,\n        \n      };\n    }\n    case GET_ALL_ACTIVITIES: {\n      return {\n        ...state,\n        activities: action.payload,\n        allActivities:action.payload\n      };\n    }\n\n    case GET_COUNTRY_NAME: {\n      return {\n        ...state,\n        countries: action.payload,\n      };\n    }\n\n    case POST_ACTIVITY: {\n      return {\n        ...state,\n      };\n    }\n    // case FILTER_BY_CONTINENT: {\n    //   const allCountries = state.allCountries;\n    //   const continentFilter =\n    //     action.payload === \"All\"\n    //       ? allCountries\n    //       : allCountries.filter((e) => e.continents === action.payload);\n    //   return {\n    //     ...state,\n    //     countries: continentFilter,\n    //   };\n    // }\n    case ORD_CONTINENT: {\n      return {\n        ...state,\n        countries: state.countries.filter((c) => c.region === action.payload),\n      };\n    }\n\n    case FILTER_BY_ACTIVITIY: {\n      const countriesWithActivities = state.allCountries.filter(\n        (country) => country.activities.length > 0\n      );\n      console.log(\"paises con actividades\", countriesWithActivities);\n      let countriesSelected = [];\n      countriesWithActivities.forEach((country) => {\n        country.activities.forEach((activity) => {\n          if (activity.name === action.payload) countriesSelected.push(country);\n        });\n      });\n      const countriesFiltered =\n        action.payload === \"All\"\n          ? state.allCountries\n          : countriesSelected\n      console.log(countriesFiltered);\n      return {\n        ...state,\n        countries: countriesFiltered,\n      };\n    }\n\n    case ORDER_BY_POPULATION: {\n      let sortedCountries;\n      if (action.payload === \"desc\") {\n        sortedCountries = state.countries.sort((a, b) => {\n          if (a.population > b.population) {\n            //si a es mayor, lo pone dsps de b\n            return 1;\n          }\n          if (b.population > a.population) {\n            //si a es menor, lo pone antes de b\n            return -1;\n          }\n          return 0; //si son iguales los deja como esta.\n        });\n      } else {\n        sortedCountries = state.countries.sort((a, b) => {\n          if (a.population > b.population) {\n            \n            return -1;\n          }\n          if (b.population > a.population) {\n            \n            return 1;\n          }\n          return 0; \n        });\n      }\n      return {\n        ...state,\n        countries: sortedCountries,\n      };\n    }\n\n    case ORDER_BY_AZ: {\n      // let sortedCountries;\n      // if (action.payload === \"asc\") {\n      //   sortedCountries = state.countries.sort((a, b) => {\n      //     if (a.name > b.name) {\n      //       //si a es mayor, lo pone dsps de b\n      //       return 1;\n      //     }\n      //     if (b.name > a.name) {\n      //       //si a es menor, lo pone antes de b\n      //       return -1;\n      //     }\n      //     return 0; //si son iguales los deja como esta.\n      //   });\n      // } else {\n      //   sortedCountries = state.countries.sort((a, b) => {\n      //     if (a.name > b.name) {\n           \n      //       return -1;\n      //     }\n      //     if (b.name > a.name) {\n            \n      //       return 1;\n      //     }\n      //     return 0; \n      //   });\n      // }\n\n      return {\n        ...state,\n        countries: sortedCountries,\n      };\n    }\n\n    case GET_COUNTRY_DETAILS: {\n      return {\n        ...state,\n        details: action.payload,\n      };\n    }\n\n    case CLEAN_COUNTRY_DETAILS: {\n      return {\n        ...state,\n        details: [],\n      };\n    }\n\n    case DELETE_ACTIVITY:{\n      let deleted = state.allCountries.filter(e => e.id !== action.payload)\n      return {\n          ...state,\n          allCountries: deleted\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default rootReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}